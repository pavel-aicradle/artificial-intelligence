from matplotlib import pyplot
import pandas
import numpy
from scipy.optimize import curve_fit

data = pandas.read_csv('experiments.csv')
n_actions = data['|actions|']
n_expansions = data['|expansions|']
algorithms = data['algorithm']
time = data['time']
lengths = data['plan length']

"""
pyplot.figure(1)
for i in range(11):
	pyplot.scatter(n_actions[i::11], n_expansions[i::11], label=algorithms[i])
pyplot.xlabel('|actions|')
pyplot.ylabel('|expansions|')
pyplot.title('node expansions vs actions in the problem')

# fit an exponential
def func(x, a, c, d):
    return a*numpy.exp(c*x)+d

popt, pcov = curve_fit(func, n_actions, n_expansions, p0=(1, 1e-6, 1))
xx = numpy.linspace(min(n_actions), max(n_actions), 100)
yy = func(xx, *popt)
pyplot.plot(xx, yy, 'k', label='exponential fit')

# fit a quadratic
coeffs = numpy.polyfit(n_actions, n_expansions, 2)
quad = numpy.poly1d(coeffs)
yy = quad(xx)
pyplot.plot(xx, yy, 'r', label='quadradtic fit')
pyplot.legend()
pyplot.yscale('log')


pyplot.figure(2)
for i in range(11):
	pyplot.scatter(n_actions[i::11], time[i::11], label=algorithms[i])
pyplot.xlabel('|actions|')
pyplot.ylabel('time')
pyplot.title('solve time vs actions in the problem')

# fit an exponential
def func(x, a, c, d):
    return a*numpy.exp(c*x)+d

popt, pcov = curve_fit(func, n_actions, time, p0=(1, 1e-6, 1))
xx = numpy.linspace(min(n_actions), max(n_actions), 100)
yy = func(xx, *popt)
pyplot.plot(xx, yy, 'k', label='exponential fit')

# fit a quadratic
coeffs = numpy.polyfit(n_actions, time, 2)
quad = numpy.poly1d(coeffs)
yy = quad(xx)
pyplot.plot(xx, yy, 'r', label='quadradtic fit')
pyplot.legend()
pyplot.yscale('log')
"""


pyplot.figure(3, figsize=(10,10))
for i in range(4):
	pyplot.scatter(range(11), lengths[i*11:(i+1)*11], label='problem '+str(i+1))
pyplot.title('lengths of plans generated by the various algorithms')
pyplot.xticks(range(11), labels=algorithms[:11].to_list(), rotation=60, ha='right')
pyplot.legend()
pyplot.yscale('log')
pyplot.tight_layout()






pyplot.show()
